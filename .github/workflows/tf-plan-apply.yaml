name: Terraform Plan and Apply

on:
    workflow_dispatch:
        inputs:
            directory:
                description: 'Specify the directory containing the Terraform configuration'
                required: true
                default: './terraform/tf-multiip-azure'
            location:
                description: 'Azure location (e.g., eastus, westus)'
                required: true
                default: 'eastus'
            rg_name:
                description: 'Resource Group name'
                required: true
                default: 'tf-multiip-rg'
            num_ip_configs:
                description: 'Number of IPs to allocate'
                required: true
                default: '1'
            subscription_id:
                description: 'Azure Subscription ID'
                required: true
                default: '1c51d1c3-d83d-4d71-ace1-df3496eddac4'
            apply:
                description: 'Apply the Terraform plan'
                required: true
                default: false
                type: boolean
        
jobs:
    terraform:
        runs-on: ubuntu-latest

        steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Azure Authentication
          id: login
          uses: azure/login@v2
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

        - name: JSON Parse
          id: parse
          env:
            AZJSON: ${{ secrets.AZURE_CREDENTIALS }}
          run: |
            ARM_CLIENT_ID=$(echo $AZJSON | jq -r '.["clientId"]')
            ARM_CLIENT_SECRET=$(echo $AZJSON | jq -r '.["clientSecret"]')
            ARM_TENANT_ID=$(echo $AZJSON | jq -r '.["tenantId"]')
            ARM_SUBSCRIPTION_ID=$(echo $AZJSON | jq -r '.["subscriptionId"]')
            echo ARM_CLIENT_ID=$ARM_CLIENT_ID >> $GITHUB_ENV
            echo ARM_CLIENT_SECRET=$ARM_CLIENT_SECRET >> $GITHUB_ENV
            echo ARM_TENANT_ID=$ARM_TENANT_ID >> $GITHUB_ENV
            echo ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID >> $GITHUB_ENV                

        - name: Install Terraform
          uses: hashicorp/setup-terraform@v3.1.1
          with:
            terraform_version: 1.8.5
    
    # Here terraform init is run directly on the runner's shell. 
        - name: Terraform Init
          working-directory: ${{ github.event.inputs.directory }}
          id: init
          run: |
            terraform init
            - name: Terraform Format
            id: fmt
            run: terraform fmt -check -recursive
            continue-on-error: true
    
    # The step runs Terraform validate.
        - name: Terraform Validate
          working-directory: ${{ github.event.inputs.directory }}
          id: validate
          run: terraform validate -no-color
    
    # Here we generate our Terraform plan. The full output will be used in a later step.
    # Also make note of the example environmental variable. This is the syntax used to pass secrets to Terraform. 
        - name: Terraform Plan
          id: tplan
          env: 
            TF_VAR_secret: '${{ secrets.example_secret }}'
          run: |
            terraform plan -no-color -var="location=${{ github.event.inputs.location }}" -var="num_ip_configs=${{ github.event.inputs.num_ip_configs }}"

        - name: Terraform Apply
          if: ${{ github.event.inputs.apply }}
          working-directory: ${{ github.event.inputs.directory }}
          run: |
            terraform apply -auto-approve \
            -var="location=${{ github.event.inputs.location }}" \
            -var="num_ip_configs=${{ github.event.inputs.num_ip_configs }}" \
            -var="rg_name=${{ github.event.inputs.rg_name }}"